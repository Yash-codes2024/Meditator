import cv2
import time
from flask import Flask, Response, render_template
import threading
from queue import Queue

app = Flask(__name__)

# Load Haar cascades
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye_tree_eyeglasses.xml')

# Global variables
video_capture = None
running = False
frame_queue = Queue(maxsize=2)  # Small buffer to prevent lag
processed_frame = None
lock = threading.Lock()

# Camera settings
FRAME_WIDTH = 640  # Reduced resolution
FRAME_HEIGHT = 480
TARGET_FPS = 30

def optimized_detection(frame):
    # Fast detection parameters
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=3, minSize=(30, 30))
    
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        roi_gray = gray[y:y+h, x:x+w]
        eyes = eye_cascade.detectMultiScale(roi_gray, scaleFactor=1.1, minNeighbors=2)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(frame, (x+ex, y+ey), (x+ex+ew, y+ey+eh), (0, 255, 0), 2)
    return frame

def camera_thread():
    global video_capture, running
    while True:
        if running:
            try:
                if video_capture is None or not video_capture.isOpened():
                    video_capture = cv2.VideoCapture(1)
                    video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, FRAME_WIDTH)
                    video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT)
                    video_capture.set(cv2.CAP_PROP_FPS, TARGET_FPS)
                
                # Grab frame as fast as possible
                ret, frame = video_capture.read()
                if ret and frame_queue.qsize() < 2:  # Prevent queue overload
                    frame_queue.put(frame)
            except:
                pass
        else:
            if video_capture and video_capture.isOpened():
                video_capture.release()
                video_capture = None
            time.sleep(0.1)

def processing_thread():
    global processed_frame
    while True:
        if not frame_queue.empty():
            frame = frame_queue.get()
            processed = optimized_detection(frame)
            
            # Fast JPEG encoding with reduced quality
            _, jpeg = cv2.imencode('.jpg', processed, [int(cv2.IMWRITE_JPEG_QUALITY), 70])
            with lock:
                processed_frame = jpeg.tobytes()
        else:
            time.sleep(0.001)  # Yield to other threads

# Start threads
threading.Thread(target=camera_thread, daemon=True).start()
threading.Thread(target=processing_thread, daemon=True).start()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    def generate():
        last_time = time.time()
        while True:
            with lock:
                if processed_frame:
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n\r\n' + processed_frame + b'\r\n')
                    # Control frame rate
                    elapsed = time.time() - last_time
                    sleep_time = max(0, (1/TARGET_FPS) - elapsed)
                    time.sleep(sleep_time)
                    last_time = time.time()
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/start')
def start_camera():
    global running
    running = True
    return "Camera started"

@app.route('/stop')
def stop_camera():
    global running
    running = False
    return "Camera stopped"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)
